import { NextRequest, NextResponse } from 'next/server';

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
interface VisitorData {
  totalCount: number;
  uniqueVisitors: Array<{
    id: string;
    lastVisit: string;
  }>;
}

// ‡πÉ‡∏ä‡πâ in-memory storage (‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠ restart server ‡πÅ‡∏ï‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)
let memoryStorage: VisitorData = {
  totalCount: 0, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  uniqueVisitors: []
};

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤ memory ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
let isInitialized = false;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
const initializeStorage = async () => {
  if (isInitialized) return;
  
  try {
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const fs = require('fs');
    const path = require('path');
    const filePath = path.join(process.cwd(), 'public', 'data', 'visitors.json');
    
    if (fs.existsSync(filePath)) {
      const fileData = fs.readFileSync(filePath, 'utf8');
      const parsedData = JSON.parse(fileData);
      
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      if (parsedData.totalCount > memoryStorage.totalCount) {
        memoryStorage = parsedData;
        console.log("üìÇ Loaded existing visitor data from file:", parsedData.totalCount);
      }
    }
  } catch (error) {
    console.log("‚ÑπÔ∏è Could not read existing file, using default values");
  }
  
  isInitialized = true;
  console.log("üöÄ Visitor counter initialized with count:", memoryStorage.totalCount);
};

// GET: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
export async function GET() {
  console.log("üìä GET /api/visitors - Reading visitor data");
  
  try {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°
    if (!isInitialized) {
      await initializeStorage();
    }
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    return NextResponse.json({
      success: true,
      data: memoryStorage
    });
  } catch (error) {
    console.error("‚ùå Error in GET /api/visitors:", error);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    return NextResponse.json({
      success: false,
      data: {
        totalCount: 0,
        uniqueVisitors: []
      }
    });
  }
}

// POST: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
export async function POST(request: NextRequest) {
  console.log("üíæ POST /api/visitors - Updating visitor data");
  
  try {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°
    if (!isInitialized) {
      await initializeStorage();
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request
    const newData: VisitorData = await request.json();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!newData || typeof newData.totalCount !== 'number') {
      throw new Error("Invalid data format");
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô memory
    const previousCount = memoryStorage.totalCount;
    memoryStorage = {
      totalCount: newData.totalCount,
      uniqueVisitors: newData.uniqueVisitors || []
    };
    
    console.log(`üìà Visitor count updated: ${previousCount} ‚Üí ${newData.totalCount}`);
    
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÑ‡∏î‡πâ)
    try {
      await saveToFile(memoryStorage);
    } catch (fileError) {
      console.log("‚ö†Ô∏è Could not save to file, but memory updated:", fileError);
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô memory ‡πÅ‡∏•‡πâ‡∏ß
    }
    
    return NextResponse.json({
      success: true,
      message: "Visitor count updated successfully",
      data: memoryStorage
    });
    
  } catch (error) {
    console.error("‚ùå Error in POST /api/visitors:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: "Failed to update visitor data",
        details: error instanceof Error ? error.message : "Unknown error"
      },
      { status: 500 }
    );
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÑ‡∏î‡πâ)
async function saveToFile(data: VisitorData): Promise<void> {
  return new Promise((resolve, reject) => {
    try {
      const fs = require('fs');
      const path = require('path');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      const dataDir = path.join(process.cwd(), 'public', 'data');
      if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir, { recursive: true });
      }
      
      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
      const filePath = path.join(dataDir, 'visitors.json');
      const jsonString = JSON.stringify(data, null, 2);
      
      fs.writeFileSync(filePath, jsonString, 'utf8');
      console.log("üíæ Data saved to file successfully");
      resolve();
      
    } catch (error) {
      console.log("‚ö†Ô∏è Could not save to file:", error);
      reject(error);
    }
  });
}

// DELETE: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
export async function DELETE() {
  console.log("üîÑ DELETE /api/visitors - Resetting visitor data");
  
  try {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô memory
    memoryStorage = {
      totalCount: 0,
      uniqueVisitors: []
    };
    
    console.log("‚úÖ Visitor data reset successfully");
    
    return NextResponse.json({
      success: true,
      message: "Visitor data reset successfully",
      data: memoryStorage
    });
    
  } catch (error) {
    console.error("‚ùå Error resetting visitor data:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: "Failed to reset visitor data" 
      },
      { status: 500 }
    );
  }
}

// PUT: ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
export async function PUT(request: NextRequest) {
  console.log("üîß PUT /api/visitors - Setting specific visitor count");
  
  try {
    const { count } = await request.json();
    
    if (typeof count !== 'number' || count < 0) {
      throw new Error("Invalid count value");
    }
    
    // ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    memoryStorage.totalCount = count;
    
    console.log(`üéØ Visitor count set to: ${count}`);
    
    return NextResponse.json({
      success: true,
      message: `Visitor count set to ${count}`,
      data: memoryStorage
    });
    
  } catch (error) {
    console.error("‚ùå Error setting visitor count:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: "Failed to set visitor count" 
      },
      { status: 500 }
    );
  }
}